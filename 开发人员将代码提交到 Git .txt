开发人员将代码提交到 Git 仓库；
Jenkins 监听到 Git 的 push 或 merge 事件；
Jenkins 自动拉取最新代码并开始执行构建任务；
构建完成后使用 Docker 打包成镜像；
Jenkins 将镜像推送到镜像仓库（如 Harbor、Docker Hub）；
最后 Jenkins 可以触发部署脚本，将新镜像部署到测试或生产环境。

2. Jenkins 配置 Git 仓库
在 Jenkins 新建一个自由风格项目或流水线项目；
配置 Git 仓库地址（HTTPS 或 SSH）；
设置分支（如 main 或 develop）；
设置触发器（如 Webhook 或 Poll SCM）；

3. 编写 Jenkinsfile（推荐使用 Pipeline）
pipeline {
    agent any

    stages {
        stage('Clone Code') {
            steps {
                git branch: 'main', url: 'https://your-git-repo-url.git'
            }
        }

        stage('Build Application') {
            steps {
                sh 'make build' // 假设你的项目用 make 来构建
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def app = docker.build("my-app:${env.BUILD_ID}")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://registry.example.com', 'docker-hub-credentials-id') {
                        app.push()
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                sh 'ssh user@server "docker pull registry.example.com/my-app:${env.BUILD_ID} && docker run -d --name myapp registry.example.com/my-app:${env.BUILD_ID}"'
            }
        }
    }
}


4. 使用 Webhook 自动触发构建
在 Git 仓库设置 Webhook，指向 Jenkins 的 URL（如 http://jenkins-server/git/notifyCommit?url=<repo-url>）；
这样每次 Push 到 Git 后会自动触发 Jenkins 构建。

三、CI/CD 流程图示意（文字版）
Git Commit & Push
       ↓
[ Jenkins Webhook Trigger ]
       ↓
[ Jenkins Pulls Latest Code ]
       ↓
[ Run Unit Tests / Linting ]
       ↓
[ Build Application Binary / Artifact ]
       ↓
[ Build Docker Image with Tag ]
       ↓
[ Push Image to Docker Registry ]
       ↓
[ Deploy via Docker Run / Kubernetes / Ansible / etc. ]
       ↓
✅ Application is deployed and running

四、优化建议
使用多阶段构建减少镜像大小；
结合 Kubernetes 实现更高级的容器编排；
使用 Jenkins Shared Library 统一构建逻辑；
添加通知机制（如 Slack、钉钉）反馈构建结果；
使用 SonarQube 进行代码质量检测；
使用 Nexus 或 Harbor 管理 Docker 镜像版本。



一、新建 Jenkins 项目
1. 创建自由风格项目（Freestyle Project）
登录 Jenkins 控制台；
点击左侧菜单的 “新建任务”（New Item）；
输入任务名称（如 my-freestyle-job）；
选择 “构建一个自由风格的软件项目”（Freestyle project）；
点击 OK 完成创建。
2. 创建流水线项目（Pipeline Project）
同样点击 “新建任务”（New Item）；
输入任务名称（如 my-pipeline-job）；
选择 “流水线”（Pipeline）；
点击 OK 完成创建。
二、配置 Git 仓库地址（HTTPS 或 SSH）
在自由风格项目中配置：
打开你刚创建的项目页面；
点击左侧菜单中的 “配置”（Configure）；
找到 “源码管理”（Source Code Management） 部分；
勾选 Git；
填写：
Repository URL：填写你的 Git 仓库地址（如 https://github.com/yourname/repo.git 或 git@github.com:yourname/repo.git）
Branches to build：填写分支名，如 */main 或 */develop
如果使用 HTTPS 并需要认证：
点击 Add 添加凭据
选择 Username with password 或 SSH Username with private key
点击 保存
在流水线项目中配置：
打开项目 → 点击 “配置”（Configure）；
找到 “流水线”（Pipeline） 部分；
设置为：
Definition: Pipeline script from SCM
SCM: Git
填写：
Repository URL：Git 地址
Branches: 分支（如 */main）
Script Path: Jenkinsfile 路径（默认为 Jenkinsfile）
如需认证，添加对应的凭证；
点击 保存
三、设置触发器（Trigger）
1. Poll SCM（轮询方式）
Jenkins 定期检查 Git 仓库是否有更新（不推荐，效率低）；
配置方法：
在项目配置页找到 Build Triggers
勾选 Poll SCM
填写定时表达式，例如：H/5 * * * * 表示每 5 分钟检查一次
2. Webhook（推荐方式）
Git 仓库推送代码后主动通知 Jenkins 触发构建；
配置方法如下：
Jenkins 端：
安装插件：Git Plugin 和 GitHub Plugin（或其他平台插件）
在项目配置页：
Build Triggers
勾选 GitHub hook trigger for GITScm polling（如果是 GitHub）
Git 仓库端（以 GitHub 为例）：
进入你的 GitHub 项目页面；
点击 Settings → Webhooks → Add webhook；
Payload URL 填写格式：
http://jenkins-url/github-webhook/
Content type 选择 application/json
Which events would you like to trigger this webhook? 选择 Just the push event
Active 勾选上
点击 Add webhook
注意：如果 Jenkins 外网不可访问，可以使用 ngrok 或内网穿透工具将本地 Jenkins 暴露给 GitHub。

四、测试配置是否成功
修改代码并提交到 Git；
查看 Jenkins 是否自动触发了构建；
检查控制台输出日志，确认是否拉取到了最新代码；
若未自动触发，请检查 Webhook 是否生效或 Jenkins 日志。



Git操作：
# 1. 初始化仓库（如未初始化）
git init

# 2. 创建 txt 文件
echo "Hello, this is a txt file." > test.txt

# 3. 设置用户信息（如未设置）
git config --global user.name "xuri0529"
git config --global user.email "xuri@example.com"

# 4. 添加文件
# 查看当前分支
git branch

# 如果当前是 master，切换到 main 或创建 main
git checkout -b main

 # 添加文件
git add test.txt

# 5. 提交更改
git commit -m "Add test.txt"

# 6. 关联远程仓库（如未关联）
git remote add origin https://github.com/xuri0529/xuri.git

# 7. 推送代码到远程仓库
git push -u origin main

